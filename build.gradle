import org.opensearch.gradle.test.RestIntegTestTask

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "2.12.0-SNAPSHOT")
        grpc_ver = "1.61.0"
        protobuf_version = "3.22.3"
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.23.2"
        classpath "io.grpc:grpc-all:${grpc_ver}"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.google.protobuf' version '0.9.4'
    id 'com.diffplug.spotless' version '6.23.0'
    id "io.freefair.lombok" version '8.4'
}

apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.pluginzip'

def pluginName = "remote-processor-${opensearch_version}"
def pluginDescription = 'Plugin that adds a search processor that calls out to the sycamore remote processor service'
def projectPath = 'org.opensearch'
def pathToPlugin = 'remoteprocessor'
def pluginClassName = 'RemoteProcessorPlugin'
group = "RemoteProcessorGroup"

opensearchplugin {
    name pluginName
    description pluginDescription
    classname "${projectPath}.${pathToPlugin}.${pluginClassName}"
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

lombok {
    version = "1.18.30"
}

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
              name = pluginName
              description = pluginDescription
              licenses {
                license {
                  name = "The Apache License, Version 2.0"
                  url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
              }
              developers {
                developer {
                  name = "OpenSearch"
                  url = "https://github.com/opensearch-project/opensearch-plugin-template-java"
                }
              }
            }
        }
    }
}

dependencies {
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpc_ver}"
    implementation "io.grpc:grpc-api:${grpc_ver}"
    implementation "io.grpc:grpc-protobuf:${grpc_ver}"
    implementation "io.grpc:grpc-stub:${grpc_ver}"
    implementation "io.grpc:grpc-okhttp:${grpc_ver}"
    implementation "io.grpc:grpc-core:${grpc_ver}"
    implementation "io.grpc:grpc-protobuf-lite:${grpc_ver}"
    implementation 'io.perfmark:perfmark-api:0.27.0'
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'com.google.code.gson:gson:2.10.1'
    compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.30'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobuf_version}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpc_ver}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto {
            // set this to proto files directory. src/main/proto is included by default so
            // can skip that one (in fact, must)
            srcDir 'protocols/'
        }
    }
}

// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false
licenseHeaders.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
forbiddenApisMain.enabled = false
// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false
javadoc.enabled = false



repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

test {
    include '**/*Tests.class'
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

testClusters.integTest {
    testDistribution = "INTEG_TEST"

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
    useCluster testClusters.integTest
}

spotless {
    java {
        removeUnusedImports()
        importOrder 'java', 'javax', 'org', 'com'
        target project.fileTree(project.rootDir) {
            include 'src/main/java/**/*.*'
            include 'src/test/**/*.*'
        }

        eclipse().configFile rootProject.file('.eclipseformat.xml')
    }
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
         // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}

